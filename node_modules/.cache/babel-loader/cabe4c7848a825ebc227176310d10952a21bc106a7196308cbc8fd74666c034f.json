{"ast":null,"code":"import Clarifai from 'clarifai';\nconst PAT = 'd0de47e4b49249f0b5b79bbc768573d5';\nconst USER_ID = 'clarifai';\nconst APP_ID = 'main';\nconst MODEL_ID = 'face-detection';\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\nconst clarifaiApp = new Clarifai.App({\n  apiKey: PAT\n});\n\n// Function to predict faces in the provided image URL\nexport const predictFaces = imgurl => {\n  const raw = JSON.stringify({\n    \"user_app_id\": {\n      \"user_id\": USER_ID,\n      \"app_id\": APP_ID\n    },\n    \"inputs\": [{\n      \"data\": {\n        \"image\": {\n          \"url\": imgurl\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Authorization': 'Key ' + PAT\n    },\n    body: raw\n  };\n\n  //   console.log('Sending request with image URL:', imgurl);\n\n  return fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/outputs`, requestOptions).then(response => response.json()).then(result => {\n    console.log('Received response:', result);\n    if (result.outputs && result.outputs[0].data && result.outputs[0].data.regions) {\n      console.log(result.outputs[0].data.regions);\n      return result.outputs[0].data.regions; // Return all regions\n    } else {\n      throw new Error('No regions found in the response.');\n    }\n  }).catch(error => {\n    console.error('Error in predictFaces:', error);\n    throw error;\n  });\n};\n\n// const PAT = 'd0de47e4b49249f0b5b79bbc768573d5';\n// const USER_ID = 'clarifai';       \n// const APP_ID = 'main';\n// // Change these to whatever model and image URL you want to use\n// const MODEL_ID = 'color-recognition';\n// const MODEL_VERSION_ID = 'dd9458324b4b45c2be1a7ba84d27cd04';    \n// const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\n\n// //dont change below \n// const raw = JSON.stringify({\n//     \"user_app_id\": {\n//         \"user_id\": USER_ID,\n//         \"app_id\": APP_ID\n//     },\n//     \"inputs\": [\n//         {\n//             \"data\": {\n//                 \"image\": {\n//                     \"url\": IMAGE_URL\n//                 }\n//             }\n//         }\n//     ]\n// });\n\n// const requestOptions = {\n//     method: 'POST',\n//     headers: {\n//         'Accept': 'application/json',\n//         'Authorization': 'Key ' + PAT\n//     },\n//     body: raw\n// };\n\n// fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\n//     .then(response => response.text())\n//     .then(result => console.log(result))\n//     .catch(error => console.log('error', error));\n\n// };","map":{"version":3,"names":["Clarifai","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","clarifaiApp","App","apiKey","predictFaces","imgurl","raw","JSON","stringify","requestOptions","method","headers","body","fetch","then","response","json","result","console","log","outputs","data","regions","Error","catch","error"],"sources":["C:/Users/HP/faceDetection/src/Components/Clar/Clar.js"],"sourcesContent":["import Clarifai from 'clarifai';\r\n\r\n\r\n\r\nconst PAT = 'd0de47e4b49249f0b5b79bbc768573d5';\r\nconst USER_ID = 'clarifai';\r\nconst APP_ID = 'main';\r\nconst MODEL_ID = 'face-detection';\r\nconst MODEL_VERSION_ID = '6dc7e46bc9124c5c8824be4822abe105';\r\n\r\nconst clarifaiApp = new Clarifai.App({\r\n  apiKey: PAT\r\n});\r\n\r\n// Function to predict faces in the provided image URL\r\nexport const predictFaces = (imgurl) => {\r\n  const raw = JSON.stringify({\r\n    \"user_app_id\": {\r\n      \"user_id\": USER_ID,\r\n      \"app_id\": APP_ID\r\n    },\r\n    \"inputs\": [\r\n      {\r\n        \"data\": {\r\n          \"image\": {\r\n            \"url\": imgurl\r\n          }\r\n        }\r\n      }\r\n    ]\r\n  });\r\n\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Authorization': 'Key ' + PAT\r\n    },\r\n    body: raw\r\n  };\r\n\r\n//   console.log('Sending request with image URL:', imgurl);\r\n\r\n  return fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/versions/${MODEL_VERSION_ID}/outputs`, requestOptions)\r\n  .then(response => response.json())\r\n  .then(result => {\r\n    console.log('Received response:', result);\r\n    if (result.outputs && result.outputs[0].data && result.outputs[0].data.regions) {\r\n        console.log( result.outputs[0].data.regions);\r\n        return result.outputs[0].data.regions; // Return all regions\r\n        \r\n    \r\n    } else {\r\n      throw new Error('No regions found in the response.');\r\n    }\r\n  })\r\n  .catch(error => {\r\n    console.error('Error in predictFaces:', error);\r\n    throw error;\r\n  });\r\n};\r\n\r\n\r\n\r\n// const PAT = 'd0de47e4b49249f0b5b79bbc768573d5';\r\n// const USER_ID = 'clarifai';       \r\n// const APP_ID = 'main';\r\n// // Change these to whatever model and image URL you want to use\r\n// const MODEL_ID = 'color-recognition';\r\n// const MODEL_VERSION_ID = 'dd9458324b4b45c2be1a7ba84d27cd04';    \r\n// const IMAGE_URL = 'https://samples.clarifai.com/metro-north.jpg';\r\n\r\n// //dont change below \r\n// const raw = JSON.stringify({\r\n//     \"user_app_id\": {\r\n//         \"user_id\": USER_ID,\r\n//         \"app_id\": APP_ID\r\n//     },\r\n//     \"inputs\": [\r\n//         {\r\n//             \"data\": {\r\n//                 \"image\": {\r\n//                     \"url\": IMAGE_URL\r\n//                 }\r\n//             }\r\n//         }\r\n//     ]\r\n// });\r\n\r\n// const requestOptions = {\r\n//     method: 'POST',\r\n//     headers: {\r\n//         'Accept': 'application/json',\r\n//         'Authorization': 'Key ' + PAT\r\n//     },\r\n//     body: raw\r\n// };\r\n\r\n\r\n// fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions)\r\n//     .then(response => response.text())\r\n//     .then(result => console.log(result))\r\n//     .catch(error => console.log('error', error));\r\n\r\n\r\n// };\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,UAAU;AAI/B,MAAMC,GAAG,GAAG,kCAAkC;AAC9C,MAAMC,OAAO,GAAG,UAAU;AAC1B,MAAMC,MAAM,GAAG,MAAM;AACrB,MAAMC,QAAQ,GAAG,gBAAgB;AACjC,MAAMC,gBAAgB,GAAG,kCAAkC;AAE3D,MAAMC,WAAW,GAAG,IAAIN,QAAQ,CAACO,GAAG,CAAC;EACnCC,MAAM,EAAEP;AACV,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMQ,YAAY,GAAIC,MAAM,IAAK;EACtC,MAAMC,GAAG,GAAGC,IAAI,CAACC,SAAS,CAAC;IACzB,aAAa,EAAE;MACb,SAAS,EAAEX,OAAO;MAClB,QAAQ,EAAEC;IACZ,CAAC;IACD,QAAQ,EAAE,CACR;MACE,MAAM,EAAE;QACN,OAAO,EAAE;UACP,KAAK,EAAEO;QACT;MACF;IACF,CAAC;EAEL,CAAC,CAAC;EAEF,MAAMI,cAAc,GAAG;IACrBC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,eAAe,EAAE,MAAM,GAAGf;IAC5B,CAAC;IACDgB,IAAI,EAAEN;EACR,CAAC;;EAEH;;EAEE,OAAOO,KAAK,CAAC,sCAAsCd,QAAQ,aAAaC,gBAAgB,UAAU,EAAES,cAAc,CAAC,CAClHK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACG,MAAM,IAAI;IACdC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,MAAM,CAAC;IACzC,IAAIA,MAAM,CAACG,OAAO,IAAIH,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,IAAIJ,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,EAAE;MAC5EJ,OAAO,CAACC,GAAG,CAAEF,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAAC;MAC5C,OAAOL,MAAM,CAACG,OAAO,CAAC,CAAC,CAAC,CAACC,IAAI,CAACC,OAAO,CAAC,CAAC;IAG3C,CAAC,MAAM;MACL,MAAM,IAAIC,KAAK,CAAC,mCAAmC,CAAC;IACtD;EACF,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;IACdP,OAAO,CAACO,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb,CAAC,CAAC;AACJ,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAGA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}